using System;
using System.Net;
using Adapter.App_API.Utils;
using Adapter.ReqResAPI.Models;
using Adapter.ReqResAPI.Services;
using Newtonsoft.Json;
using NUnit.Framework;
using static Adapter.ReqResAPI.API.UserRest;
using static ReqResAPI.Tests.TestData.DataProvidersAPI;

namespace ReqResAPI.Tests.Tests.UserAPI
{
    public class TC_PostUser
    {
        [Test]
        [Category("Users")]
        [Author("JLR")]
        [Property("TestCaseId", "12349")]
        [TestCaseSource(typeof(CreateUserProvider))]
        [Description("Create User")]
        public void CreateUser_TC12349(User user, UserContent content, HttpStatusCode ExpectedStatusCode)
        {
            var response = UserService.PostUserCreate(user);
            HttpStatusCode statusCode = response.StatusCode;

            Assert.Multiple(() =>
            {
                var responseBody = JsonConvert.DeserializeObject<UserPostResponse>(response.Content);
                Assert.AreEqual(ExpectedStatusCode, statusCode, "Response code differs from expected");

                Assert.AreEqual(user.name, responseBody.name,"name differs from expected");
                Assert.AreEqual(user.job, responseBody.job,"job differs from expected");
                Assert.NotNull(responseBody.id,"id differs from expected");
                Assert.NotNull(responseBody.createdAt,"createdAt differs from expected");
                //Assert.AreEqual(content.id, responseBody.id,"total differs from expected"); //using in case these values are not dinamic(Id is generated automatically)
                //Assert.AreEqual(content.createdAt, responseBody.createdAt,"total_pages differs from expected"); //using in case this values are not dinamic(createdAt is generated by dateTime)
            });
        }

        [Test]
        [Category("Users")]
        [Author("JLR")]
        [Property("TestCaseId", "12351")]
        [TestCaseSource(typeof(CreateUserNoJobProvider))]
        [Description("Create User without Job property")]
        public void CreateUserNoJob_TC12351(User user, UserContent content, HttpStatusCode ExpectedStatusCode)
        {
            var userNoJob = ExperienceAPIUtils.removeKeyFromObject(user, "job");
            var response = UserService.PostUserCreate(userNoJob);
            HttpStatusCode statusCode = response.StatusCode;

            Assert.Multiple(() =>
            {
                var responseBody = JsonConvert.DeserializeObject<UserPostResponse>(response.Content);
                Assert.AreEqual(ExpectedStatusCode, statusCode, "Response code differs from expected");

                Assert.AreEqual(user.name, responseBody.name,"name differs from expected");
                Assert.NotNull(responseBody.id,"id differs from expected");
                Assert.NotNull(responseBody.createdAt,"createdAt differs from expected");
            });
        }

        [Test]
        [Category("Users")]
        [Author("JLR")]
        [Property("TestCaseId", "12352")]
        [TestCaseSource(typeof(CreateUserFakeDataProvider))]
        [Description("Create User using faker data")]
        public void CreateUserFakeData_TC12352(string name, string job, HttpStatusCode ExpectedStatusCode)
        {
            UserFakers user = new UserFakers(name, job);
            //Console.WriteLine("Sent: " + JsonConvert.SerializeObject(user));
            var response = UserService.PostUserCreate(user);
            //Console.WriteLine("Response: " + response.Content); 
            HttpStatusCode statusCode = response.StatusCode;
            
            Assert.Multiple(() =>
            {
                var responseBody = JsonConvert.DeserializeObject<UserPostResponse>(response.Content);
                Assert.AreEqual(ExpectedStatusCode, statusCode, "Response code differs from expected");

                Assert.AreEqual(user.name, responseBody.name,"name differs from expected");
                Assert.AreEqual(user.job, responseBody.job,"job differs from expected");
                Assert.NotNull(responseBody.id,"id differs from expected");
                Assert.NotNull(responseBody.createdAt,"createdAt differs from expected");
            });
        }
    }
}
